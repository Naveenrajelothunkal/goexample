package main


import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"

	"graphql-go-crud/config"
	"graphql-go-crud/data/model/mongoModel/skilldetailsmodel"
	_ "graphql-go-crud/docs" // docs is generated by Swag CLI, you have to import it.
	"graphql-go-crud/mutation"
	"graphql-go-crud/queries"
	"graphql-go-crud/resolvers/query_resolvers/myresolvers"
	"graphql-go-crud/resolvers/query_resolvers/skillresolvers"
	"graphql-go-crud/services/authorization"

	"github.com/graphql-go/graphql"
	httpSwagger "github.com/swaggo/http-swagger"

	"github.com/gorilla/mux"
)

var schema, _ = graphql.NewSchema(
	graphql.SchemaConfig{
		Query:    queries.Query,
		Mutation: mutation.MutationType,
	},
)

func executeQuery(query string, schema graphql.Schema) *graphql.Result {
	result := graphql.Do(graphql.Params{
		Schema:        schema,
		RequestString: query,
	})
	if len(result.Errors) > 0 {
		fmt.Printf("errors: %v", result.Errors)
	}
	return result
}
func getEngine(w http.ResponseWriter, r *http.Request) {
	type AuthString struct {
		Token string `json:"token"`
	}
	var token AuthString
	err := json.NewDecoder(r.Body).Decode(&token)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Fatal(err)
		return
	}
	response, ok := authorization.ValidateToken(token.Token)
	if !ok {
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
	} else {
		result := executeQuery(r.URL.Query().Get("query"), schema)
		json.NewEncoder(w).Encode(result)
	}
}

type SkilltypeList struct {
	skills []skilldetailsmodel.SkillType
}

// GetSkillList godoc
// @Summary Get list of skill
// @Description Get list of skill
// @Tags skills
// @Produce  json
// @Success 200 {array} SkilltypeList
// @Security ApiKeyAuth
// @Router /goengine/skills [get]
func getSkillList(w http.ResponseWriter, r *http.Request) {
	// type AuthString struct {
	// 	Token string `json:"token"`
	// }
	// var token AuthString
	// err := json.NewDecoder(r.Body).Decode(&token)
	// if err != nil {
	// 	w.WriteHeader(http.StatusBadRequest)
	// 	log.Fatal(err)
	// 	return
	// }
	reqToken := r.Header.Get("token")
	params := graphql.ResolveParams{}
	response, ok := authorization.ValidateToken(reqToken)
	if !ok {
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
	} else {
		result, err := skillresolvers.SkillListResolver(params)
		if err != nil {
			log.Print(err)
		}
		json.NewEncoder(w).Encode(result)
	}
}

type AuthString struct {
	Token string `json:"token"`
}
type Mytype struct {
	Id    int     `json:"id"`
	Name  string  `json:"name"`
	Info  string  `json:"info"`
	Price float32 `json:"float32"`
}

// GetMyList godoc
// @Summary Get list of mylist data
// @Description Get list of mylist data
// @Tags mylist
// @Produce  json
// @Success 200 {object} Mytype
// @Security ApiKeyAuth
// @Router /goengine/mylist [get]
func getMyList(w http.ResponseWriter, r *http.Request) {
	// type AuthString struct {
	// 	Token string `json:"token"`
	// }
	// var token AuthString
	// err := json.NewDecoder(r.Body).Decode(&token)

	reqToken := r.Header.Get("token")
	// fmt.Println(reqToken)
	// splitToken := strings.Split(reqToken, "Bearer")
	// reqToken = reqToken[1]
	// if reqToken != nil {
	// 	w.WriteHeader(http.StatusBadRequest)
	// 	log.Fatal(reqToken)
	// 	return
	// }
	params := graphql.ResolveParams{}
	response, ok := authorization.ValidateToken(reqToken)
	if !ok {
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
	} else {
		result, err := myresolvers.MyList(params)
		if err != nil {
			log.Print(err)
		}
		json.NewEncoder(w).Encode(result)
	}
}

type Token struct {
	token string `json:"token"`
}

// Credentials - token request body object
type Credentials struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// GetToken godoc
// @Summary Get token to access application
// @Description Get token to access application
// @Tags token
// @Accept  json
// @Produce  json
// @Param Credentials body Credentials true "Credentials info"
// @Success 200 {string} Token
// @Router /token [post]
func getToken(w http.ResponseWriter, r *http.Request) {
	type Credentials struct {
		Password string `json:"password"`
		Username string `json:"username"`
	}
	var creds Credentials
	err := json.NewDecoder(r.Body).Decode(&creds)
	if err != nil {
		log.Print(err)
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	token, ok := authorization.GenerateToken(creds.Username, creds.Password)
	if !ok {
		w.WriteHeader(http.StatusBadRequest)
	}
	json.NewEncoder(w).Encode(token)
}

// @title graphql-go-crud
// @version 1.0
// @description A Graphql golang API
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:8080
// @BasePath /
// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name token
func main() {
	router := mux.NewRouter()
	config.ConfigureServer()

	router.HandleFunc("/token", getToken)
	router.HandleFunc("/goengine", getEngine)
	router.HandleFunc("/goengine/mylist", getMyList)
	router.HandleFunc("/goengine/skills", getSkillList)

	// http.HandleFunc("/goengine", func(w http.ResponseWriter, r *http.Request) {
	// 	type AuthString struct {
	// 		Token string `json:"token"`
	// 	}
	// 	var token AuthString
	// 	err := json.NewDecoder(r.Body).Decode(&token)
	// 	if err != nil {
	// 		w.WriteHeader(http.StatusBadRequest)
	// 		log.Fatal(err)
	// 		return
	// 	}
	// 	response, ok := authorization.ValidateToken(token.Token)
	// 	if !ok {
	// 		w.WriteHeader(http.StatusBadRequest)
	// 		json.NewEncoder(w).Encode(response)
	// 	} else {
	// 		result := executeQuery(r.URL.Query().Get("query"), schema)
	// 		json.NewEncoder(w).Encode(result)
	// 	}
	// })
	// http.HandleFunc("/swagger", httpSwagger.WrapHandler)
	fmt.Println("Server is running on port 8080")
	router.PathPrefix("/swagger").Handler(httpSwagger.WrapHandler)
	log.Fatal(http.ListenAndServe(":8080", router))
}
